/**
 * @packageDocumentation
 * @module api.functional.bbs.articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IBbsArticle } from "../../../structures/IBbsArticle";
import type { IPage } from "../../../structures/IPage";
import { NestiaSimulator } from "../../../utils/NestiaSimulator";

/**
 * Paginate entire articles.
 * 
 * @param section Section code
 * @param input Page request info
 * @returns Paginated articles with summarized info
 * 
 * @controller BbsArticlesController.index
 * @path PATCH /bbs/:section/articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    section: null | string,
    input: index.Input,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              section,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...index.METADATA,
                  path: index.path(section),
              } as const,
              input,
          );
}
export namespace index {
    export type Input = Primitive<IPage.IRequest>;
    export type Output = Primitive<IPage<IBbsArticle.ISummary>>;

    export const METADATA = {
        method: "PATCH",
        path: "/bbs/:section/articles",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: null | string): string => {
        return `/bbs/${encodeURIComponent(section ?? "null")}/articles`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IBbsArticle.ISummary>> =>
        typia.random<Primitive<IPage<IBbsArticle.ISummary>>>(g);
    export const simulate = async (
        connection: IConnection,
        section: null | string,
        input: index.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section),
            contentType: "application/json",
        });
        assert.param("section")(() => typia.assert(section));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Paginate entire articles (query ver.).
 * 
 * @param section Section code
 * @param input Page request info
 * @returns Paginated articles with summarized info
 * 
 * @controller BbsArticlesController.query
 * @path GET /bbs/:section/articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function query(
    connection: IConnection,
    section: null | string,
    input: query.Query,
): Promise<query.Output> {
    return !!connection.simulate
        ? query.simulate(
              connection,
              section,
              input,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...query.METADATA,
                  path: query.path(section, input),
              } as const,
          );
}
export namespace query {
    export type Query = Resolved<IPage.IRequest>;
    export type Output = Primitive<IPage<IBbsArticle.ISummary>>;

    export const METADATA = {
        method: "GET",
        path: "/bbs/:section/articles",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: null | string, input: query.Query): string => {
        const variables: Record<any, any> = input as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/bbs/${encodeURIComponent(section ?? "null")}/articles${encoded.length ? `?${encoded}` : ""}`;;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IBbsArticle.ISummary>> =>
        typia.random<Primitive<IPage<IBbsArticle.ISummary>>>(g);
    export const simulate = async (
        connection: IConnection,
        section: null | string,
        input: query.Query,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section, input),
            contentType: "application/json",
        });
        assert.param("section")(() => typia.assert(section));
        assert.query(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Read an article.
 * 
 * @param section Section code
 * @param id Target article ID
 * @returns Detailed article info
 * 
 * @controller BbsArticlesController.at
 * @path GET /bbs/:section/articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
    connection: IConnection,
    section: string,
    id: null | string & Format<"uuid">,
): Promise<at.Output> {
    return !!connection.simulate
        ? at.simulate(
              connection,
              section,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...at.METADATA,
                  path: at.path(section, id),
              } as const,
          );
}
export namespace at {
    export type Output = Primitive<IBbsArticle>;

    export const METADATA = {
        method: "GET",
        path: "/bbs/:section/articles/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: string, id: null | string & Format<"uuid">): string => {
        return `/bbs/${encodeURIComponent(section ?? "null")}/articles/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle> =>
        typia.random<Primitive<IBbsArticle>>(g);
    export const simulate = async (
        connection: IConnection,
        section: string,
        id: null | string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section, id),
            contentType: "application/json",
        });
        assert.param("section")(() => typia.assert(section));
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Get first article of a day.
 * 
 * @param section Section code
 * @param date Target data
 * @returns The first article info
 * 
 * @controller BbsArticlesController.first
 * @path GET /bbs/:section/articles/first/:date
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function first(
    connection: IConnection,
    section: string,
    date: string & Format<"date">,
): Promise<first.Output> {
    return !!connection.simulate
        ? first.simulate(
              connection,
              section,
              date,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...first.METADATA,
                  path: first.path(section, date),
              } as const,
          );
}
export namespace first {
    export type Output = Primitive<IBbsArticle>;

    export const METADATA = {
        method: "GET",
        path: "/bbs/:section/articles/first/:date",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: string, date: string & Format<"date">): string => {
        return `/bbs/${encodeURIComponent(section ?? "null")}/articles/first/${encodeURIComponent(date ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle> =>
        typia.random<Primitive<IBbsArticle>>(g);
    export const simulate = async (
        connection: IConnection,
        section: string,
        date: string & Format<"date">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section, date),
            contentType: "application/json",
        });
        assert.param("section")(() => typia.assert(section));
        assert.param("date")(() => typia.assert(date));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Store a new article.
 * 
 * @param section Section code
 * @param input Content to store
 * @returns Newly archived article
 * 
 * @controller BbsArticlesController.store
 * @path POST /bbs/:section/articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function store(
    connection: IConnection,
    section: string,
    input: store.Input,
): Promise<store.Output> {
    return !!connection.simulate
        ? store.simulate(
              connection,
              section,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...store.METADATA,
                  path: store.path(section),
              } as const,
              input,
          );
}
export namespace store {
    export type Input = Primitive<IBbsArticle.IStore>;
    export type Output = Primitive<IBbsArticle>;

    export const METADATA = {
        method: "POST",
        path: "/bbs/:section/articles",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: string): string => {
        return `/bbs/${encodeURIComponent(section ?? "null")}/articles`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle> =>
        typia.random<Primitive<IBbsArticle>>(g);
    export const simulate = async (
        connection: IConnection,
        section: string,
        input: store.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section),
            contentType: "application/json",
        });
        assert.param("section")(() => typia.assert(section));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Update an article.
 * 
 * @param section Section code
 * @param id Target article ID
 * @param input Content to update
 * @returns Updated content
 * 
 * @controller BbsArticlesController.update
 * @path PUT /bbs/:section/articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    section: string,
    id: string & Format<"uuid">,
    input: update.Input,
): Promise<update.Output> {
    return !!connection.simulate
        ? update.simulate(
              connection,
              section,
              id,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...update.METADATA,
                  path: update.path(section, id),
              } as const,
              input,
          );
}
export namespace update {
    export type Input = Primitive<IBbsArticle.IStore>;
    export type Output = Primitive<IBbsArticle>;

    export const METADATA = {
        method: "PUT",
        path: "/bbs/:section/articles/:id",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: string, id: string & Format<"uuid">): string => {
        return `/bbs/${encodeURIComponent(section ?? "null")}/articles/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle> =>
        typia.random<Primitive<IBbsArticle>>(g);
    export const simulate = async (
        connection: IConnection,
        section: string,
        id: string & Format<"uuid">,
        input: update.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section, id),
            contentType: "application/json",
        });
        assert.param("section")(() => typia.assert(section));
        assert.param("id")(() => typia.assert(id));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}