/**
 * @packageDocumentation
 * @module api.functional.bbs.articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { HttpError, IConnection, IPropagation, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IBbsArticle } from "../../../structures/IBbsArticle";
import type { IPage } from "../../../structures/IPage";
import type { IPageIBbsArticle } from "../../../structures/IPageIBbsArticle";
import { NestiaSimulator } from "../../../utils/NestiaSimulator";

/**
 * List up summarized articles.
 * 
 * @param section Target section
 * @param query Pagination query
 * @returns Paginated articles with summarization
 * 
 * @controller BbsArticlesController.index
 * @path GET /bbs/articles/:section
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    section: string,
    query: index.Query,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              section,
              query,
          )
        : PlainFetcher.propagate(
              connection,
              {
                  ...index.METADATA,
                  path: index.path(section, query),
              } as const,
          );
}
export namespace index {
    export type Query = Resolved<IPage.IRequest>;
    export type Output = IPropagation<{
        200: IPageIBbsArticle.ISummary;
    }>;

    export const METADATA = {
        method: "GET",
        path: "/bbs/articles/:section",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: string, query: index.Query): string => {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/bbs/articles/${encodeURIComponent(section ?? "null")}${encoded.length ? `?${encoded}` : ""}`;;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPageIBbsArticle.ISummary> =>
        typia.random<Primitive<IPageIBbsArticle.ISummary>>(g);
    export const simulate = async (
        connection: IConnection,
        section: string,
        query: index.Query,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section, query),
            contentType: "application/json",
        });
        try {
            assert.param("section")(() => typia.assert(section));
            assert.query(() => typia.assert(query));
        } catch (exp) {
            if (!typia.is<HttpError>(exp)) throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message,
            } as any;
        }
        return {
            success: true,
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
            data: random(
                typeof connection.simulate === 'object' &&
                    connection.simulate !== null
                    ? connection.simulate
                    : undefined
            ),
        }
    }
}

/**
 * Store a new article.
 * 
 * @param section Section code
 * @param input Content to store
 * @returns Newly archived article
 * 
 * @controller BbsArticlesController.store
 * @path POST /bbs/articles/:section
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function store(
    connection: IConnection,
    section: string,
    input: store.Input,
): Promise<store.Output> {
    return !!connection.simulate
        ? store.simulate(
              connection,
              section,
              input,
          )
        : PlainFetcher.propagate(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...store.METADATA,
                  path: store.path(section),
              } as const,
              input,
          );
}
export namespace store {
    export type Input = Primitive<IBbsArticle.IStore>;
    export type Output = IPropagation<{
        201: IBbsArticle;
    }>;

    export const METADATA = {
        method: "POST",
        path: "/bbs/articles/:section",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: string): string => {
        return `/bbs/articles/${encodeURIComponent(section ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle> =>
        typia.random<Primitive<IBbsArticle>>(g);
    export const simulate = async (
        connection: IConnection,
        section: string,
        input: store.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section),
            contentType: "application/json",
        });
        try {
            assert.param("section")(() => typia.assert(section));
            assert.body(() => typia.assert(input));
        } catch (exp) {
            if (!typia.is<HttpError>(exp)) throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message,
            } as any;
        }
        return {
            success: true,
            status: 201,
            headers: {
                "Content-Type": "application/json",
            },
            data: random(
                typeof connection.simulate === 'object' &&
                    connection.simulate !== null
                    ? connection.simulate
                    : undefined
            ),
        }
    }
}

/**
 * Update an article.
 * 
 * @param section Section code
 * @param id Target article ID
 * @param input Content to update
 * @returns Updated content
 * 
 * @controller BbsArticlesController.update
 * @path PUT /bbs/articles/:section/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    section: string,
    id: (string & Format<"uuid">),
    input: update.Input,
): Promise<update.Output> {
    return !!connection.simulate
        ? update.simulate(
              connection,
              section,
              id,
              input,
          )
        : PlainFetcher.propagate(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...update.METADATA,
                  path: update.path(section, id),
              } as const,
              input,
          );
}
export namespace update {
    export type Input = Primitive<IBbsArticle.IStore>;
    export type Output = IPropagation<{
        200: IBbsArticle;
    }>;

    export const METADATA = {
        method: "PUT",
        path: "/bbs/articles/:section/:id",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (section: string, id: (string & Format<"uuid">)): string => {
        return `/bbs/articles/${encodeURIComponent(section ?? "null")}/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle> =>
        typia.random<Primitive<IBbsArticle>>(g);
    export const simulate = async (
        connection: IConnection,
        section: string,
        id: (string & Format<"uuid">),
        input: update.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(section, id),
            contentType: "application/json",
        });
        try {
            assert.param("section")(() => typia.assert(section));
            assert.param("id")(() => typia.assert(id));
            assert.body(() => typia.assert(input));
        } catch (exp) {
            if (!typia.is<HttpError>(exp)) throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message,
            } as any;
        }
        return {
            success: true,
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
            data: random(
                typeof connection.simulate === 'object' &&
                    connection.simulate !== null
                    ? connection.simulate
                    : undefined
            ),
        }
    }
}