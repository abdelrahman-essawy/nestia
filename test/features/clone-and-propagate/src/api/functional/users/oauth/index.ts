/**
 * @packageDocumentation
 * @module api.functional.users.oauth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { HttpError, IConnection, IPropagation, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IAuthentication } from "../../../structures/IAuthentication";
import { NestiaSimulator } from "../../../utils/NestiaSimulator";

/**
 * - When namespaced DTO type comes, `@nestia/sdk` had taken a mistake that writing only the deepest type even in the top or middle level namespaced types.
 * - When `clone` mode being used in SDK generator, it was not possible to clone recursive DTO type.
 * @throws 404
 * 
 * @controller UsersController.getOauthProfile
 * @path GET /users/:user_id/oauth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getOauthProfile(
    connection: IConnection,
    user_id: string,
    query: getOauthProfile.Query,
): Promise<getOauthProfile.Output> {
    return !!connection.simulate
        ? getOauthProfile.simulate(
              connection,
              user_id,
              query,
          )
        : PlainFetcher.propagate(
              connection,
              {
                  ...getOauthProfile.METADATA,
                  path: getOauthProfile.path(user_id, query),
              } as const,
          );
}
export namespace getOauthProfile {
    export type Query = Resolved<IAuthentication>;
    export type Output = IPropagation<{
        200: IAuthentication.IProfile;
        404: ("404 Not Found");
    }>;

    export const METADATA = {
        method: "GET",
        path: "/users/:user_id/oauth",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (user_id: string, query: getOauthProfile.Query): string => {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/users/${encodeURIComponent(user_id ?? "null")}/oauth${encoded.length ? `?${encoded}` : ""}`;;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IAuthentication.IProfile> =>
        typia.random<Primitive<IAuthentication.IProfile>>(g);
    export const simulate = async (
        connection: IConnection,
        user_id: string,
        query: getOauthProfile.Query,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(user_id, query),
            contentType: "application/json",
        });
        try {
            assert.param("user_id")(() => typia.assert(user_id));
            assert.query(() => typia.assert(query));
        } catch (exp) {
            if (!typia.is<HttpError>(exp)) throw exp;
            return {
                success: false,
                status: exp.status,
                headers: exp.headers,
                data: exp.toJSON().message,
            } as any;
        }
        return {
            success: true,
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
            data: random(
                typeof connection.simulate === 'object' &&
                    connection.simulate !== null
                    ? connection.simulate
                    : undefined
            ),
        }
    }
}