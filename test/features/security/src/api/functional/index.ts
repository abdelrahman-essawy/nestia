/**
 * @packageDocumentation
 * @module api.functional
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { IToken } from "../structures/IToken";

/**
 * @controller SecurityController.basic
 * @path GET /basic
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function basic(
    connection: IConnection,
): Promise<basic.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...basic.METADATA,
            path: basic.path(),
        } as const,
    );
}
export namespace basic {
    export type Output = Primitive<IToken>;

    export const METADATA = {
        method: "GET",
        path: "/basic",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/basic`;
    }
}

/**
 * 
 * @security basic
 * 
 * @controller SecurityController.basic_by_comment
 * @path GET /basic_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function basic_by_comment(
    connection: IConnection,
): Promise<basic_by_comment.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...basic_by_comment.METADATA,
            path: basic_by_comment.path(),
        } as const,
    );
}
export namespace basic_by_comment {
    export type Output = Primitive<IToken>;

    export const METADATA = {
        method: "GET",
        path: "/basic_by_comment",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/basic_by_comment`;
    }
}

/**
 * @controller SecurityController.bearer
 * @path GET /bearer
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function bearer(
    connection: IConnection,
): Promise<bearer.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...bearer.METADATA,
            path: bearer.path(),
        } as const,
    );
}
export namespace bearer {
    export type Output = Primitive<IToken>;

    export const METADATA = {
        method: "GET",
        path: "/bearer",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/bearer`;
    }
}

/**
 * 
 * @security bearer
 * 
 * @controller SecurityController.bearer_by_comment
 * @path GET /bearer_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function bearer_by_comment(
    connection: IConnection,
): Promise<bearer_by_comment.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...bearer_by_comment.METADATA,
            path: bearer_by_comment.path(),
        } as const,
    );
}
export namespace bearer_by_comment {
    export type Output = Primitive<IToken>;

    export const METADATA = {
        method: "GET",
        path: "/bearer_by_comment",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/bearer_by_comment`;
    }
}

/**
 * @controller SecurityController.oauth2
 * @path GET /oauth2
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function oauth2(
    connection: IConnection,
): Promise<oauth2.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...oauth2.METADATA,
            path: oauth2.path(),
        } as const,
    );
}
export namespace oauth2 {
    export type Output = Primitive<IToken>;

    export const METADATA = {
        method: "GET",
        path: "/oauth2",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/oauth2`;
    }
}

/**
 * 
 * @security oauth2 write:pets read:pets
 * 
 * @controller SecurityController.oauth2_by_comment
 * @path GET /oauth2_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function oauth2_by_comment(
    connection: IConnection,
): Promise<oauth2_by_comment.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...oauth2_by_comment.METADATA,
            path: oauth2_by_comment.path(),
        } as const,
    );
}
export namespace oauth2_by_comment {
    export type Output = Primitive<IToken>;

    export const METADATA = {
        method: "GET",
        path: "/oauth2_by_comment",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/oauth2_by_comment`;
    }
}

/**
 * @controller SecurityController.security
 * @path GET /security
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function security(
    connection: IConnection,
): Promise<security.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...security.METADATA,
            path: security.path(),
        } as const,
    );
}
export namespace security {
    export type Output = Primitive<IToken>;

    export const METADATA = {
        method: "GET",
        path: "/security",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/security`;
    }
}