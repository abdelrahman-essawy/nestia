/**
 * @packageDocumentation
 * @module api.functional.sellers.authenticate.password
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { EncryptedFetcher } from "@nestia/fetcher/lib/EncryptedFetcher";

import type { ISeller } from "../../../../structures/ISeller";

/**
 * Change password.
 * 
 * @param input Old and new passwords
 * @return Empty object
 * 
 * @controller SellerAuthenticateController.change
 * @path PATCH /sellers/authenticate/password/change
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function change(
    connection: IConnection,
    input: change.Input,
): Promise<void> {
    return EncryptedFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "text/plain",
            },
        },
        {
            ...change.METADATA,
            path: change.path(),
        } as const,
        input,
    );
}
export namespace change {
    export type Input = Primitive<ISeller.IChangePassword>;

    export const METADATA = {
        method: "PATCH",
        path: "/sellers/authenticate/password/change",
        request: {
            type: "text/plain",
            encrypted: true
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/sellers/authenticate/password/change`;
    }
}